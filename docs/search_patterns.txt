/// Some explanation of the search syntax

> tagA, tagB, tagC
A comma separated list of tags is logical equivalent to:
has_tag(tagA) && has_tag(tagB) && has_tag(tagC)

> A really long tag, short, another tag
Tags can freely have spaces in them, but are always trimmed, that is no preceding or leading tags

> ThIs Is A LogIcAL tAG
Tags are all converted to lower case, so casing doesn't matter

> {tagA,B}, tagB
If a tag's name contains a comma, to correctly search it you must surround the tag in {}
There for: NO TAGS CAN CONTAINS '{' or '}'
I believe this restriction to be reasonable, and allows for greater control

> tagA ::and tagB
Explict && (and) operator instead of the implicit and of commas
'::' will be the start of numerous operators, therefore:
'::' SHOULD BE AVOIDED IN TAGS
However if needed see:

> {tagA::B} ::and tagB
If your tag contains '::', then you need to wrap it in {}, note
if you tag contains ':::', that is 3 or more ':' in a row, then this doesn't matter

> tagA ::or tagB
::or is A logical || (or) operator

> tagA ::and ::not tagB
::not is the unitary ! (not) operator

> tagA ::& (tagB ::| ::! tagC)
Alternate forms of operators

/// Dealing with parameterised tags:

Parameterised tags are no longer a thing :(

/// Some special operators

> ::has::name
Searches for items that have an attached the "name" attribute
Another for "book author" showing how spaces are handled, just like normal tags
> ::has::book author

> ::name::equals::Bob's Great Adventures: The mount' of doom
Searches for an item, which has attached the "name" attribute and equals: [Bob's Great Adventures: The mount' of doom]

> ::name::contains::{1 Fish, 2 Fish}
Searches for an item, which has attached the "name" attribute and it contains: [1 Fish, 2 Fish]
Here {} was used to escape the ','

These have some implications, for all attached attributes:
'::' SHOULD BE AVOIDED, but can be escaped using {}
NEVER CONTAINS '{' or '}'

> ::instance::tag1
Searches for items, that have an instance, and have an instance that has the "tag1" tag

> ::instance::has::uuid
Searches for an item, which has an instance, which has an attached attrib, "uuid"

> ::instance::uuid::equals::85781903019
Searches for an item, which has an instance, which has an attached attrib, "uuid" and that equals "85781903019"

/// Order of operations & Parentheses

> tagA, (tagB ::or tabC)
Parentheses can be used to control the order/scope of operators
Eqv statement w/0:
> tagA, ::not tagB ::and ::not tabC

> tagA ::and tagB ::or tagC, tagD
The order of operators in left to right
so with explicit parentheses:
> (((tagA ::and tagB) ::or tagC) ::and tabD)

> {players: (1)}
As as result of parentheses taking president,
tags and attributes should try avoid parentheses, but the can
be used by using {} to escape, just like you can escape ,

/// Other

No tag param or attribute value is allowed to contain '{' or '}'

///

From this hopefully all further rules should be clear

TODO: Possibly improvements include being able to use "" to escape

Collected rules:
NO TAG NAMES CAN CONTAINS '{' or '}'
'::' SHOULD BE AVOIDED IN TAG NAMES (though can be escaped, and 3 or more : in a row is always fine?)
',' SHOULD BE AVOIDED IN TAG NAMES (though can be escaped)
'(' SHOULD BE AVOIDED AT THE START OF TAG NAMES (though can be escaped)
')' SHOULD BE AVOIDED AT THE END OF TAG NAMES (though can be escaped)
'-' SHOULD BE AVOIDED AT THE START OF TAG NAMES (though can be escaped)

TODO: Fix:
'(' & ')' SHOULD BE AVOIDED IN TAG NAMES (though can be escaped)
also fix the - issue